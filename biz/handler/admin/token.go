// Code generated by hertz generator.

package admin

import (
	"context"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/jinzhu/copier"
	"hertz-admin/biz/domain"
	logic "hertz-admin/biz/logic/admin"
	"hertz-admin/data"

	"github.com/cloudwego/hertz/pkg/app"
	"hertz-admin/api/model/admin"
	base "hertz-admin/api/model/base"
)

// UpdateToken .
// @router /api/admin/token/update [POST]
func UpdateToken(ctx context.Context, c *app.RequestContext) {
	var err error
	var req admin.TokenInfo
	resp := new(base.BaseResp)
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.StatusCode = base.StatusCode_Fail
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	var tokenInfo domain.TokenInfo
	err = copier.Copy(&tokenInfo, &req)
	if err != nil {
		resp.StatusCode = base.StatusCode_Fail
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}

	err = logic.NewToken(data.Default()).Update(ctx, &tokenInfo)
	if err != nil {
		resp.StatusCode = base.StatusCode_Fail
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}

	resp.StatusCode = base.StatusCode_Success
	resp.StatusMsg = "success"
	c.JSON(consts.StatusOK, resp)
}

// DeleteToken .
// @router /api/admin/token [DELETE]
func DeleteToken(ctx context.Context, c *app.RequestContext) {
	var err error
	var req admin.DeleteReq
	resp := new(base.BaseResp)
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.StatusCode = base.StatusCode_Fail
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	err = logic.NewToken(data.Default()).Delete(ctx, req.UserID)
	if err != nil {
		resp.StatusCode = base.StatusCode_Fail
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}

	resp.StatusCode = base.StatusCode_Success
	resp.StatusMsg = "success"
	c.JSON(consts.StatusOK, resp)
}

// TokenList .
// @router /api/admin/token/list [GET]
func TokenList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req admin.TokenListReq
	resp := new(admin.TokenListResp)
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.StatusCode = base.StatusCode_Fail
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	var tokenListReq domain.TokenListReq
	err = copier.Copy(&tokenListReq, &req)
	if err != nil {
		resp.StatusCode = base.StatusCode_Fail
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	tokens, total, err := logic.NewToken(data.Default()).List(ctx, &tokenListReq)
	if err != nil {
		resp.StatusCode = base.StatusCode_Fail
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	resp.Data = &admin.TokenInfoList{
		Total: uint64(total),
		Data:  make([]*admin.TokenInfo, 0, len(tokens)),
	}
	err = copier.Copy(&resp.Data.Data, &tokens)
	if err != nil {
		resp.StatusCode = base.StatusCode_Fail
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	resp.StatusCode = base.StatusCode_Success
	resp.StatusMsg = "success"
	c.JSON(consts.StatusOK, resp)
}
