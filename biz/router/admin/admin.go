// Code generated by hertz generator. DO NOT EDIT.

package admin

import (
	"github.com/cloudwego/hertz/pkg/app/server"
	admin "hertz-admin/biz/handler/admin"
)

/*
 This file will register all the routes of the services in the master idl.
 And it will update automatically when you use the "update" command for the idl.
 So don't modify the contents of the file, or your code will be deleted when it is updated.
*/

// Register register routes based on the IDL 'api.${HTTP Method}' annotation.
func Register(r *server.Hertz) {

	root := r.Group("/", rootMw()...)
	{
		_api := root.Group("/api", _apiMw()...)
		_api.GET("/captcha", append(_captchaMw(), admin.Captcha)...)
		_api.POST("/delete_struct_tag", append(_deletestructtagMw(), admin.DeleteStructTag)...)
		_api.GET("/health", append(_healthcheckMw(), admin.HealthCheck)...)
		_api.GET("/init_database", append(_initdatabaseMw(), admin.InitDatabase)...)
		_api.POST("/register", append(_registerMw(), admin.Register)...)
		_api.POST("/struct_to_proto", append(_structtoprotoMw(), admin.StructToProto)...)
		{
			_admin := _api.Group("/admin", _adminMw()...)
			_admin.GET("/role", append(_rolebyidMw(), admin.RoleByID)...)
			_role := _admin.Group("/role", _roleMw()...)
			_role.GET("/list", append(_rolelistMw(), admin.RoleList)...)
			_role.POST("/status", append(_updaterolestatusMw(), admin.UpdateRoleStatus)...)
			{
				_api0 := _admin.Group("/api", _api0Mw()...)
				_api0.POST("/create", append(_createapiMw(), admin.CreateApi)...)
				_api0.DELETE("/delete", append(_deleteapiMw(), admin.DeleteApi)...)
				_api0.GET("/list", append(_apilistMw(), admin.ApiList)...)
				_api0.PUT("/update", append(_updateapiMw(), admin.UpdateApi)...)
			}
			{
				_authority := _admin.Group("/authority", _authorityMw()...)
				{
					_api1 := _authority.Group("/api", _api1Mw()...)
					_api1.POST("/create", append(_createauthorityMw(), admin.CreateAuthority)...)
					_api1.POST("/role", append(_apiauthorityMw(), admin.ApiAuthority)...)
					_api1.PUT("/update", append(_updateapiauthorityMw(), admin.UpdateApiAuthority)...)
				}
				{
					_menu := _authority.Group("/menu", _menuMw()...)
					_menu.POST("/create", append(_createmenuauthorityMw(), admin.CreateMenuAuthority)...)
					_menu.POST("/role", append(_menuauthorityMw(), admin.MenuAuthority)...)
					_menu.PUT("/update", append(_updatemenuauthorityMw(), admin.UpdateMenuAuthority)...)
				}
			}
			{
				_dict := _admin.Group("/dict", _dictMw()...)
				_dict.POST("/create", append(_createdictionaryMw(), admin.CreateDictionary)...)
				_dict.DELETE("/delete", append(_deletedictionaryMw(), admin.DeleteDictionary)...)
				_dict.GET("/list", append(_dictionarylistMw(), admin.DictionaryList)...)
				_dict.PUT("/update", append(_updatedictionaryMw(), admin.UpdateDictionary)...)
				{
					_detail := _dict.Group("/detail", _detailMw()...)
					_detail.POST("/create", append(_createdictionarydetailMw(), admin.CreateDictionaryDetail)...)
					_detail.DELETE("/delete", append(_deletedictionarydetailMw(), admin.DeleteDictionaryDetail)...)
					_detail.GET("/list", append(_detailbydictionarynameMw(), admin.DetailByDictionaryName)...)
					_detail.PUT("/update", append(_updatedictionarydetailMw(), admin.UpdateDictionaryDetail)...)
				}
			}
			{
				_logs := _admin.Group("/logs", _logsMw()...)
				_logs.DELETE("/delete_all", append(_deletelogsMw(), admin.DeleteLogs)...)
				_logs.GET("/list", append(_getlogslistMw(), admin.GetLogsList)...)
			}
			{
				_menu0 := _admin.Group("/menu", _menu0Mw()...)
				_menu0.POST("/create", append(_createmenuMw(), admin.CreateMenu)...)
				_menu0.DELETE("/delete", append(_deletemenuMw(), admin.DeleteMenu)...)
				_menu0.GET("/list", append(_menulistMw(), admin.MenuList)...)
				_menu0.GET("/role", append(_menubyroleMw(), admin.MenuByRole)...)
				_menu0.PUT("/update", append(_updatemenuMw(), admin.UpdateMenu)...)
				{
					_param := _menu0.Group("/param", _paramMw()...)
					_param.POST("/create", append(_createmenuparamMw(), admin.CreateMenuParam)...)
					_param.DELETE("/delete", append(_deletemenuparamMw(), admin.DeleteMenuParam)...)
					_param.GET("/list", append(_menuparamlistbymenuidMw(), admin.MenuParamListByMenuID)...)
					_param.PUT("/update", append(_updatemenuparamMw(), admin.UpdateMenuParam)...)
				}
			}
			{
				_oauth := _admin.Group("/oauth", _oauthMw()...)
				{
					_provider := _oauth.Group("/provider", _providerMw()...)
					_provider.POST("/create", append(_createproviderMw(), admin.CreateProvider)...)
					_provider.DELETE("/delete", append(_deleteproviderMw(), admin.DeleteProvider)...)
					_provider.GET("/list", append(_getproviderlistMw(), admin.GetProviderList)...)
					_provider.PUT("/update", append(_updateproviderMw(), admin.UpdateProvider)...)
				}
			}
			{
				_role0 := _admin.Group("/role", _role0Mw()...)
				_role0.POST("/create", append(_createroleMw(), admin.CreateRole)...)
				_role0.DELETE("/delete", append(_deleteroleMw(), admin.DeleteRole)...)
				_role0.PUT("/update", append(_updateroleMw(), admin.UpdateRole)...)
			}
			{
				_token := _admin.Group("/token", _tokenMw()...)
				_token.DELETE("/delete", append(_deletetokenMw(), admin.DeleteToken)...)
				_token.GET("/list", append(_tokenlistMw(), admin.TokenList)...)
				_token.PUT("/update", append(_updatetokenMw(), admin.UpdateToken)...)
			}
			{
				_user := _admin.Group("/user", _userMw()...)
				_user.POST("/create", append(_createuserMw(), admin.CreateUser)...)
				_user.DELETE("/delete", append(_deleteuserMw(), admin.DeleteUser)...)
				_user.GET("/info", append(_userinfoMw(), admin.UserInfo)...)
				_user.GET("/list", append(_userlistMw(), admin.UserList)...)
				_user.PUT("/password", append(_changepasswordMw(), admin.ChangePassword)...)
				_user.GET("/perm", append(_userpermcodeMw(), admin.UserPermCode)...)
				_user.GET("/profile", append(_userprofileMw(), admin.UserProfile)...)
				_user.PUT("/profile", append(_updateprofileMw(), admin.UpdateProfile)...)
				_user.POST("/status", append(_updateuserstatusMw(), admin.UpdateUserStatus)...)
				_user.PUT("/update", append(_updateuserMw(), admin.UpdateUser)...)
			}
		}
		{
			_oauth0 := _api.Group("/oauth", _oauth0Mw()...)
			_oauth0.GET("/callback", append(_oauthcallbackMw(), admin.OauthCallback)...)
			_oauth0.POST("/login", append(_oauthloginMw(), admin.OauthLogin)...)
		}
	}
}
